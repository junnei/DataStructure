#pragma once
#include <iostream>

using namespace std;

#define MAX_ITEMS 30

/**
*	@brief	큐가 꽉찼을 때 예외 클래스.
*/
class FullQueue
{
public:
	/**
	*	@brief	큐가 꽉찼을 때 메세지 출력.
	*/
	void print()
	{
		cout << "FullQueue exception thrown." << endl;
	}
};

/**
*	@brief	큐가 비었을 때 예외 클래스.
*/
class EmptyQueue
{
public:
	/**
	*	@brief	큐가 비었을 때 메세지 출력.
	*/
	void print()
	{
		cout << "EmtpyQueue exception thrown." << endl;
	}
};

/**
*	@brief	큐 클래스.
*/
template <class T>
class CircularQueueType
{
public:
	/**
	*	@brief	MAX_ITEMS만큼의 사이즈를 가진 큐를 초기화한다.
	*	@pre	MAX_ITEMS가 정의되어야한다.
	*	@post	할당된 리스트를 가르킨다.
	*/
	CircularQueueType();

	/**
	*	@brief	max만큼의 사이즈를 가진 큐를 초기화한다.
	*	@pre	max가 정의되어야한다.
	*	@post	할당된 리스트를 가르킨다.
	*	@param	큐의 사이즈
	*/
	CircularQueueType(int max);

	/**
	*	@brief	소멸자
	*/
	~CircularQueueType();

	/**
	*	@brief	큐가 꽉찼는지 확인한다.
	*	@pre	큐가 초기화 되어야한다.
	*	@post	없음.
	*	@return	큐가 꽉찼으면 1, 아닌 경우에 0을 출력.
	*/
	bool IsFull();

	/**
	*	@brief	큐가 비었는지 확인한다.
	*	@pre	큐가 초기화 되어야한다.
	*	@post	없음.
	*	@return	큐가 비었으면 1, 아닌 경우에 0을 출력.
	*/
	bool IsEmpty();

	/**
	*	@brief	큐안의 내용을 모두 삭제한다.
	*	@pre	큐가 존재해야한다.
	*	@post	큐가 비워진다.
	*/
	void MakeEmpty();

	/**
	*	@brief	큐에 새로운 자료를 추가한다.
	*	@pre	큐가 존재해야한다.
	*	@post	큐에 새로운 자료를 추가된다.
	*/
	void EnQueue(T newItem);

	/**
	*	@brief	큐의 제일 먼저 들어온 자료부터 출력한다.
	*	@pre	큐가 존재해야한다.
	*	@post	큐의 데이터를 삭제한다.
	*/
	void DeQueue(T& item);

	/**
	*	@brief	큐에 모든 아이템을 출력한다
	*	@pre	큐가 존재해야한다.
	*	@post	없음.
	*/
	void Print();

	/**
	*	@brief	m_iFront을 출력한다
	*	@pre	큐가 존재해야한다.
	*	@post	없음.
	*	@return m_iFront
	*/
	int Front();

	/**
	*	@brief	m_iRear을 출력한다
	*	@pre	큐가 존재해야한다.
	*	@post	없음.
	*	@return m_iRear 
	*/
	int Rear();

	/**
	*	@brief	m_nMaxQueue을 출력한다
	*	@pre	큐가 존재해야한다.
	*	@post	없음.
	*	@return m_nMaxQueue
	*/
	int MAX();

	/**
	*	@brief	큐에 아이템이 존재하면 삭제한다.
	*	@pre	큐가 존재해야한다.
	*	@post	아이템이 삭제된다.
	*	@return 삭제에 성공하면 1을, 아닌경우에 0을 반환한다.
	*/
	int Deduplication(T inData);

private:
	int m_iFront;			//큐의 앞을 나타내는 플래그
	int m_iRear;			//큐의 뒤를 나타내는 플래그
	int m_nMaxQueue;		//큐의 사이즈
	T* m_pItems;		// 아이템타입 포인터 변수

};


/***********************************************************************************************************************************************************/

// Allocate dynamic array whose size is MAX_ITEMS 30.
template <class T>
CircularQueueType<T>::CircularQueueType()
{
	m_nMaxQueue = MAX_ITEMS + 1;		// 원형 큐의 최대 크기를 MAX_ITEM +1로 선언해서 한칸은 비게한다.
	m_iFront = m_nMaxQueue - 1;		// 원형 큐의 선두를 최대크기 -1 로 선언
	m_iRear = m_nMaxQueue - 1;			// 원형 큐의 후미를 최대크기 -1 로 선언
	m_pItems = new T[m_nMaxQueue];
}

// 큐의 사이즈를 받아온 만큼 할당해준다.
template <class T>
CircularQueueType<T>::CircularQueueType(int max)
{
	m_nMaxQueue = max + 1;			// 원형 큐의 최대 크기를 max로 선언해서 한칸은 비게한다.
	m_iFront = m_nMaxQueue - 1;			// 원형 큐의 선두를 최대크기 -1 로 선언
	m_iRear = m_nMaxQueue - 1;			// 원형 큐의 후미를 최대크기 -1 로 선언
	m_pItems = new T[m_nMaxQueue];
}

// Destruct the object. Free the array dynamically allocated.
template <class T>
CircularQueueType<T>::~CircularQueueType()
{
	delete[] m_pItems;
}

// Determines whether the queue is full.
template <class T>
bool CircularQueueType<T>::IsFull()
{
	if ((m_iRear + 1) % m_nMaxQueue == m_iFront)  // 선두와 후미의 위치를 비교하여 큐가 꽉차있는지 확인. 후미가 선두를 교차하면 안됨.
		return true;
	else
		return false;
}

// Determines whether the queue is empty.
template <class T>
bool CircularQueueType<T>::IsEmpty()
{
	if (m_iFront == m_iRear) // 선두와 후미의 위치를 비교하여 큐가 비어있는지 확인
		return true;
	else
		return false;
}

//큐를 비워준다.
template <class T>
void CircularQueueType<T>::MakeEmpty()
{
	m_iFront = m_iRear;				// 선두와 후미의 위치를 같게 하여 큐를 비움
}

// Adds newItem to the top of the queue.
template <class T>
void CircularQueueType<T>::EnQueue(T newItem)
{
	if (IsFull())
	{
		throw FullQueue();
	}
	else
	{
		m_iRear = (m_iRear + 1) % m_nMaxQueue;		// 큐가 꽉차지 않았다면 후미의 위치를 한단계 옮기고
		m_pItems[m_iRear] = newItem;				// 옮긴 위치에 새로운 아이템 배열을 추가
	}
}

// Removes top item from the queue.
template <class T>
void CircularQueueType<T>::DeQueue(T& item)
{
	if (IsEmpty())
	{
		throw EmptyQueue();
	}
	else
	{
		m_iFront = (m_iFront + 1) % m_nMaxQueue;		// 큐가 비어있지 않다면 선두의 위치를 한단계 옮기고
		item = m_pItems[m_iFront];					// 옮긴 위치의 아이템 배열을 삭제
	}
}

// Print all the items in the queue on screen
template <class T>
void CircularQueueType<T>::Print()
{
	// Stack 내의 모든 element 출력.
	for (int i = (m_iFront + 1) % m_nMaxQueue; i != (m_iRear + 1) % m_nMaxQueue; i = (i + 1) % m_nMaxQueue) //큐의 처음+1에서 출발해서 큐의 마지막까지 확인한다. 모든 검색시 mod로 순환하게 한다.
	{
		cout << m_pItems[i] << " - ";
	}
	cout << endl;
}

template <class T>
int CircularQueueType<T>::Deduplication(T inData)
{
	// Stack 내의 모든 element 출력.
	for (int i = (m_iFront + 1) % m_nMaxQueue; i != (m_iRear + 1) % m_nMaxQueue; i = (i + 1) % m_nMaxQueue) //큐의 처음+1에서 출발해서 큐의 마지막까지 확인한다. 모든 검색시 mod로 순환하게 한다.
	{
		if (inData == m_pItems[i])
		{
			for (;i != (m_iRear + 1) % m_nMaxQueue; i = (i + 1) % m_nMaxQueue)
			{
				m_pItems[i] = m_pItems[i + 1];
			}
			if (m_iRear == 0)
				m_iRear = m_nMaxQueue - 1;
			else
				m_iRear = m_iRear - 1 ;
			return 1;
		}
	}
	return 0;
}


template <class T>
int CircularQueueType<T>::Front()
{
	return m_iFront;
}


template <class T>
int CircularQueueType<T>::Rear()
{
	return m_iRear;
}


template <class T>
int CircularQueueType<T>::MAX()
{
	return m_nMaxQueue;
}